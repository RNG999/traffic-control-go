name: PR Merged Actions

on:
  pull_request:
    types: [closed]

jobs:
  handle-merged-pr:
    if: github.event.pull_request.merged == true && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Handle Merged PR
    steps:
      - name: Extract Issue Numbers
        id: extract-issues
        uses: actions/github-script@v7
        with:
          script: |
            console.log('=== PR MERGED WORKFLOW DEBUG ===');
            console.log('Event action:', context.payload.action);
            console.log('PR merged:', context.payload.pull_request.merged);
            console.log('PR state:', context.payload.pull_request.state);
            console.log('PR number:', context.payload.pull_request.number);
            
            const prNumber = context.payload.pull_request.number;
            let autoCloseIssues = [];
            let referencedIssues = [];
            
            try {
              console.log('🔍 Using GraphQL API to extract issue references...');
              
              const graphqlQuery = `
                query($owner: String!, $repo: String!, $number: Int!) {
                  repository(owner: $owner, name: $repo) {
                    pullRequest(number: $number) {
                      number
                      title
                      closingIssuesReferences(first: 20) {
                        nodes {
                          number
                          title
                        }
                      }
                      timelineItems(itemTypes: [CROSS_REFERENCED_EVENT], first: 20) {
                        nodes {
                          __typename
                          ... on CrossReferencedEvent {
                            source {
                              __typename
                              ... on Issue {
                                number
                                title
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const variables = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                number: prNumber
              };
              
              const response = await github.graphql(graphqlQuery, variables);
              const pullRequest = response.repository.pullRequest;
              
              console.log('GraphQL data retrieved successfully');
              
              // closingIssuesReferencesから自動クローズ対象のIssueを取得
              autoCloseIssues = pullRequest.closingIssuesReferences.nodes.map(issue => issue.number.toString());
              console.log(`✅ Found ${autoCloseIssues.length} auto-close issues: ${autoCloseIssues.map(n => '#' + n).join(', ')}`);
              
              // timelineItemsからCross-referencedなIssueを取得（自動クローズ対象以外）
              pullRequest.timelineItems.nodes.forEach(item => {
                if (item.__typename === 'CrossReferencedEvent' && item.source?.__typename === 'Issue') {
                  const issueNumber = item.source.number.toString();
                  if (!autoCloseIssues.includes(issueNumber) && !referencedIssues.includes(issueNumber)) {
                    referencedIssues.push(issueNumber);
                  }
                }
              });
              
              console.log(`🔗 Found ${referencedIssues.length} referenced issues: ${referencedIssues.map(n => '#' + n).join(', ')}`);
              
            } catch (graphqlError) {
              console.log('⚠️ GraphQL API failed, falling back to text parsing');
              console.log('GraphQL Error:', graphqlError.message);
              
              // フォールバック: テキスト解析
              const title = context.payload.pull_request.title;
              const body = context.payload.pull_request.body || '';
              
              const autoClosePatterns = [
                /(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#(\d+)/gi,
                /(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+https:\/\/github\.com\/[^\/]+\/[^\/]+\/issues\/(\d+)/gi
              ];
              
              const referencePattern = /\B#(\d+)\b/g;
              const textToCheck = title + ' ' + body;
              
              for (const pattern of autoClosePatterns) {
                let match;
                while ((match = pattern.exec(textToCheck)) !== null) {
                  const issueNumber = match[1];
                  if (!autoCloseIssues.includes(issueNumber)) {
                    autoCloseIssues.push(issueNumber);
                  }
                }
              }
              
              let match;
              while ((match = referencePattern.exec(textToCheck)) !== null) {
                const issueNumber = match[1];
                if (!referencedIssues.includes(issueNumber) && !autoCloseIssues.includes(issueNumber)) {
                  referencedIssues.push(issueNumber);
                }
              }
              
              console.log('Fallback text parsing results:');
              console.log('Auto-close issues:', autoCloseIssues);
              console.log('Referenced issues:', referencedIssues);
            }
            
            core.setOutput('auto-close-issues', JSON.stringify(autoCloseIssues));
            core.setOutput('referenced-issues', JSON.stringify(referencedIssues));
            core.setOutput('pr-number', prNumber.toString());


      - name: Close Related Issues
        uses: actions/github-script@v7
        with:
          script: |
            const autoCloseIssues = JSON.parse('${{ steps.extract-issues.outputs.auto-close-issues }}');
            const prNumber = '${{ steps.extract-issues.outputs.pr-number }}';
            const prUrl = context.payload.pull_request.html_url;
            const prTitle = context.payload.pull_request.title;
            const mergedBy = context.payload.pull_request.merged_by.login;
            
            console.log(`🎉 PR #${prNumber} was merged by @${mergedBy}`);
            console.log(`📋 Title: ${prTitle}`);
            console.log(`🔗 URL: ${prUrl}`);
            
            // 自動クローズ対象のIssueをクローズ
            for (const issueNumber of autoCloseIssues) {
              try {
                // まずIssueの現在の状態をチェック
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber)
                });
                
                if (issue.state === 'open') {
                  // 完了コメントを追加
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: parseInt(issueNumber),
                    body: `🎯 **Issue Completed!**\n\n` +
                          `✅ Resolved by PR #${prNumber}: "${prTitle}"\n` +
                          `🚀 Merged by @${mergedBy}\n` +
                          `📋 Pull Request: ${prUrl}\n\n` +
                          `This issue is now closed.\n\n` +
                          `---\n` +
                          `🤖 Automated by GitHub Actions • Generated with [Claude Code](https://claude.ai/code)`
                  });
                  
                  // Issueをクローズ
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: parseInt(issueNumber),
                    state: 'closed',
                    state_reason: 'completed'
                  });
                  
                  console.log(`✅ Successfully closed issue #${issueNumber}`);
                  core.notice(`Issue #${issueNumber} has been closed by PR #${prNumber}`);
                } else {
                  console.log(`ℹ️ Issue #${issueNumber} is already ${issue.state}`);
                }
              } catch (error) {
                console.log(`❌ Failed to close issue #${issueNumber}:`, error.message);
                core.warning(`Failed to close issue #${issueNumber}: ${error.message}`);
              }
            }

