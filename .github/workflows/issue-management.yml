name: Issue Management

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]

  issue_comment:
    types: [created]

jobs:
  auto-close-on-success:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    name: Auto-close Issues on Successful CI
    steps:
      - name: Get PR associated with workflow run
        id: get-pr
        uses: actions/github-script@v7
        with:
          script: |
            const runId = context.payload.workflow_run.id;
            const headSha = context.payload.workflow_run.head_sha;
            
            // workflow runに関連するPRを検索
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              head: `${context.repo.owner}:${context.payload.workflow_run.head_branch}`,
              sort: 'updated',
              direction: 'desc'
            });
            
            let associatedPR = null;
            for (const pr of pulls) {
              if (pr.head.sha === headSha) {
                associatedPR = pr;
                break;
              }
            }
            
            if (associatedPR && associatedPR.merged) {
              console.log(`✅ Found merged PR #${associatedPR.number} for successful CI run`);
              core.setOutput('pr-number', associatedPR.number.toString());
              core.setOutput('pr-title', associatedPR.title);
              core.setOutput('pr-body', associatedPR.body || '');
              core.setOutput('has-pr', 'true');
            } else {
              console.log('ℹ️ No merged PR found for this workflow run');
              core.setOutput('has-pr', 'false');
            }

      - name: Close Issues After Successful CI
        if: steps.get-pr.outputs.has-pr == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.get-pr.outputs.pr-number }}';
            const prTitle = '${{ steps.get-pr.outputs.pr-title }}';
            const prBody = '${{ steps.get-pr.outputs.pr-body }}';
            
            // Issue番号を抽出（自動クローズ対象のみ）
            const autoClosePatterns = [
              /(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#(\d+)/gi,
              /(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+https:\/\/github\.com\/[^\/]+\/[^\/]+\/issues\/(\d+)/gi
            ];
            
            const textToCheck = prTitle + ' ' + prBody;
            let issuesToClose = [];
            
            for (const pattern of autoClosePatterns) {
              let match;
              while ((match = pattern.exec(textToCheck)) !== null) {
                const issueNumber = match[1];
                if (!issuesToClose.includes(issueNumber)) {
                  issuesToClose.push(issueNumber);
                }
              }
            }
            
            console.log(`📋 Found ${issuesToClose.length} issues to close from PR #${prNumber}`);
            
            // Issueを実際にクローズ
            for (const issueNumber of issuesToClose) {
              try {
                // まずIssueの現在の状態をチェック
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber)
                });
                
                if (issue.state === 'open') {
                  // 完了コメントを追加
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: parseInt(issueNumber),
                    body: `🎯 **Issue Completed Successfully!**\n\n` +
                          `✅ All CI/CD checks have passed for PR #${prNumber}\n` +
                          `🚀 Changes have been successfully merged to main branch\n` +
                          `📋 PR Title: "${prTitle}"\n\n` +
                          `This issue is now resolved and will be closed automatically.\n\n` +
                          `---\n` +
                          `🤖 Automated by GitHub Actions • Generated with [Claude Code](https://claude.ai/code)`
                  });
                  
                  // Issueをクローズ
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: parseInt(issueNumber),
                    state: 'closed',
                    state_reason: 'completed'
                  });
                  
                  console.log(`✅ Successfully closed issue #${issueNumber}`);
                  core.notice(`Issue #${issueNumber} has been automatically closed after successful CI`);
                } else {
                  console.log(`ℹ️ Issue #${issueNumber} is already ${issue.state}`);
                }
              } catch (error) {
                console.log(`❌ Failed to close issue #${issueNumber}:`, error.message);
                core.warning(`Failed to close issue #${issueNumber}: ${error.message}`);
              }
            }

  handle-issue-commands:
    if: github.event.issue_comment.created
    runs-on: ubuntu-latest
    name: Handle Issue Commands
    steps:
      - name: Process Issue Commands
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body.toLowerCase().trim();
            const issueNumber = context.payload.issue.number;
            const commenter = context.payload.comment.user.login;
            const issueAuthor = context.payload.issue.user.login;
            
            // 権限チェック：Issue作成者、collaborator、またはownerのみコマンド実行可能
            const { data: permissions } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: commenter
            });
            
            const hasPermission = ['admin', 'maintain', 'write'].includes(permissions.permission) || 
                                commenter === issueAuthor ||
                                commenter === context.repo.owner;
            
            if (!hasPermission) {
              console.log(`❌ User @${commenter} does not have permission to execute commands`);
              return;
            }
            
            // /close コマンド
            if (comment === '/close' || comment === '/done') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `✅ Issue marked as completed by @${commenter}\n\n` +
                      `---\n` +
                      `🤖 Automated by GitHub Actions`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'closed',
                state_reason: 'completed'
              });
              
              console.log(`✅ Issue #${issueNumber} closed by command from @${commenter}`);
            }
            
            // /reopen コマンド
            else if (comment === '/reopen') {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'open'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `🔄 Issue reopened by @${commenter}\n\n` +
                      `---\n` +
                      `🤖 Automated by GitHub Actions`
              });
              
              console.log(`🔄 Issue #${issueNumber} reopened by command from @${commenter}`);
            }
            
            // /help コマンド
            else if (comment === '/help' || comment === '/commands') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `🤖 **Available Commands**\n\n` +
                      `• \`/close\` or \`/done\` - Mark issue as completed and close\n` +
                      `• \`/reopen\` - Reopen a closed issue\n` +
                      `• \`/help\` or \`/commands\` - Show this help message\n\n` +
                      `**Automatic Actions:**\n` +
                      `• Issues are automatically closed when PR with "Fixes #${issueNumber}" is merged and CI passes\n` +
                      `• PRs must reference issue numbers (checked automatically)\n\n` +
                      `---\n` +
                      `🤖 Automated by GitHub Actions`
              });
              
              console.log(`ℹ️ Help message sent to issue #${issueNumber} for @${commenter}`);
            }