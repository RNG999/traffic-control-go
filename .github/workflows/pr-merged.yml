name: PR Merged Actions

on:
  pull_request:
    types: [closed]

jobs:
  handle-merged-pr:
    if: github.event.pull_request.merged == true && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Handle Merged PR
    steps:
      - name: Extract Issue Numbers
        id: extract-issues
        uses: actions/github-script@v7
        with:
          script: |
            console.log('=== PR MERGED WORKFLOW DEBUG ===');
            console.log('Event action:', context.payload.action);
            console.log('PR merged:', context.payload.pull_request.merged);
            console.log('PR state:', context.payload.pull_request.state);
            console.log('PR number:', context.payload.pull_request.number);
            
            const prNumber = context.payload.pull_request.number;
            let autoCloseIssues = [];
            let referencedIssues = [];
            
            try {
              // GitHub APIを使用してPRに関連するIssueを取得
              const { data: timelineEvents } = await github.rest.issues.listEventsForTimeline({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber
              });
              
              // connected/cross-referencedイベントからIssue番号を抽出
              for (const event of timelineEvents) {
                if (event.event === 'connected' && event.source && event.source.issue) {
                  const issueNumber = event.source.issue.number.toString();
                  if (!autoCloseIssues.includes(issueNumber)) {
                    autoCloseIssues.push(issueNumber);
                  }
                  console.log(`✅ Found connected issue #${issueNumber}`);
                } else if (event.event === 'cross-referenced' && event.source && event.source.issue) {
                  const issueNumber = event.source.issue.number.toString();
                  if (!referencedIssues.includes(issueNumber) && !autoCloseIssues.includes(issueNumber)) {
                    referencedIssues.push(issueNumber);
                  }
                  console.log(`🔗 Found referenced issue #${issueNumber}`);
                }
              }
              
              console.log('GitHub API results:');
              console.log('Auto-close issues:', autoCloseIssues);
              console.log('Referenced issues:', referencedIssues);
              
            } catch (apiError) {
              console.log('⚠️ GitHub API failed, falling back to text parsing');
              console.log('API Error:', apiError.message);
              
              // フォールバック: テキスト解析
              const title = context.payload.pull_request.title;
              const body = context.payload.pull_request.body || '';
              
              const autoClosePatterns = [
                /(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#(\d+)/gi,
                /(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+https:\/\/github\.com\/[^\/]+\/[^\/]+\/issues\/(\d+)/gi
              ];
              
              const referencePattern = /\B#(\d+)\b/g;
              const textToCheck = title + ' ' + body;
              
              for (const pattern of autoClosePatterns) {
                let match;
                while ((match = pattern.exec(textToCheck)) !== null) {
                  const issueNumber = match[1];
                  if (!autoCloseIssues.includes(issueNumber)) {
                    autoCloseIssues.push(issueNumber);
                  }
                }
              }
              
              let match;
              while ((match = referencePattern.exec(textToCheck)) !== null) {
                const issueNumber = match[1];
                if (!referencedIssues.includes(issueNumber) && !autoCloseIssues.includes(issueNumber)) {
                  referencedIssues.push(issueNumber);
                }
              }
              
              console.log('Fallback text parsing results:');
              console.log('Auto-close issues:', autoCloseIssues);
              console.log('Referenced issues:', referencedIssues);
            }
            
            core.setOutput('auto-close-issues', JSON.stringify(autoCloseIssues));
            core.setOutput('referenced-issues', JSON.stringify(referencedIssues));
            core.setOutput('pr-number', prNumber.toString());

      - name: Comment on Referenced Issues
        uses: actions/github-script@v7
        with:
          script: |
            const autoCloseIssues = JSON.parse('${{ steps.extract-issues.outputs.auto-close-issues }}');
            const referencedIssues = JSON.parse('${{ steps.extract-issues.outputs.referenced-issues }}');
            const prNumber = '${{ steps.extract-issues.outputs.pr-number }}';
            const prUrl = context.payload.pull_request.html_url;
            const prTitle = context.payload.pull_request.title;
            
            // 自動クローズされるIssueにコメント
            for (const issueNumber of autoCloseIssues) {
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber),
                  body: `🎉 This issue has been resolved by PR #${prNumber}: "${prTitle}"\n\n` +
                        `🔗 Pull Request: ${prUrl}\n\n` +
                        `This issue will be automatically closed when the PR is merged.\n\n` +
                        `---\n` +
                        `🤖 Generated with [Claude Code](https://claude.ai/code)`
                });
                console.log(`✅ Commented on issue #${issueNumber}`);
              } catch (error) {
                console.log(`❌ Failed to comment on issue #${issueNumber}:`, error.message);
              }
            }
            
            // 参照のみのIssueにコメント
            for (const issueNumber of referencedIssues) {
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber),
                  body: `🔗 This issue was referenced in PR #${prNumber}: "${prTitle}"\n\n` +
                        `📋 Pull Request: ${prUrl}\n\n` +
                        `---\n` +
                        `🤖 Generated with [Claude Code](https://claude.ai/code)`
                });
                console.log(`✅ Referenced comment added to issue #${issueNumber}`);
              } catch (error) {
                console.log(`❌ Failed to comment on issue #${issueNumber}:`, error.message);
              }
            }

      - name: Update Project Status
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.extract-issues.outputs.pr-number }}';
            const prUrl = context.payload.pull_request.html_url;
            const prTitle = context.payload.pull_request.title;
            const mergedBy = context.payload.pull_request.merged_by.login;
            
            // PRマージの通知をIssueにコメント
            core.notice(`✅ PR #${prNumber} merged successfully: ${prTitle}`);
            console.log(`🎉 PR #${prNumber} was merged by @${mergedBy}`);
            console.log(`📋 Title: ${prTitle}`);
            console.log(`🔗 URL: ${prUrl}`);

  cleanup-on-close:
    if: github.event.pull_request.merged == false && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Handle Closed PR
    steps:
      - name: Notify PR Closed Without Merge
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const prTitle = context.payload.pull_request.title;
            const closedBy = context.payload.pull_request.closed_by.login;
            
            console.log(`❌ PR #${prNumber} was closed without merging by @${closedBy}`);
            console.log(`📋 Title: ${prTitle}`);
            
            core.warning(`PR #${prNumber} was closed without merging`);