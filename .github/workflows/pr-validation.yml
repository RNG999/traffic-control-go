name: PR Validation

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  validate-issue-link:
    runs-on: ubuntu-latest
    name: Validate Issue Link
    steps:
      - name: Check for Issue Reference
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            
            console.log('=== PR VALIDATION DEBUG ===');
            console.log('PR Number:', prNumber);
            
            let hasValidIssueReference = false;
            let foundIssues = [];
            
            // „Åæ„Åö„ÉÜ„Ç≠„Çπ„ÉàËß£Êûê„ÅßÈ´òÈÄü„ÉÅ„Çß„ÉÉ„ÇØ
            const title = context.payload.pull_request.title;
            const body = context.payload.pull_request.body || '';
            
            console.log('PR Title:', title);
            console.log('PR Body length:', body.length);
            
            const patterns = [
              /(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#\d+/gi,
              /\B#\d+\b/g
            ];
            
            let foundReferences = [];
            const textToCheck = title + ' ' + body;
            
            for (const pattern of patterns) {
              const matches = textToCheck.match(pattern);
              if (matches) {
                hasValidIssueReference = true;
                foundReferences.push(...matches);
              }
            }
            
            console.log('Text parsing found references:', foundReferences);
            
            if (hasValidIssueReference) {
              console.log('‚úÖ Issue reference found via text parsing');
              core.notice(`‚úÖ Found issue references: ${foundReferences.join(', ')}`);
            } else {
              // „ÉÜ„Ç≠„Çπ„ÉàËß£Êûê„ÅßË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅÆ„ÅøTimeline API„ÇíË©¶„Åô
              console.log('üîç Text parsing failed, trying Timeline API...');
              
              try {
                const { data: timelineEvents } = await github.rest.issues.listEventsForTimeline({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber
                });
                
                console.log('Timeline events found:', timelineEvents.length);
                
                // connected/cross-referenced„Ç§„Éô„É≥„Éà„Åã„ÇâIssueÁï™Âè∑„ÇíÊäΩÂá∫
                for (const event of timelineEvents) {
                  if ((event.event === 'connected' || event.event === 'cross-referenced') && 
                      event.source && event.source.issue) {
                    const issueNumber = event.source.issue.number;
                    foundIssues.push(issueNumber);
                    hasValidIssueReference = true;
                    console.log(`‚úÖ Found linked issue #${issueNumber} (${event.event})`);
                  }
                }
                
                if (hasValidIssueReference) {
                  core.notice(`‚úÖ PR is properly linked to issues via Timeline API: ${foundIssues.map(n => '#' + n).join(', ')}`);
                  console.log('‚úÖ Issue reference validation passed via Timeline API');
                }
                
              } catch (timelineError) {
                console.log('‚ö†Ô∏è Timeline API also failed:', timelineError.message);
              }
              
              if (!hasValidIssueReference) {
                throw new Error(
                  '‚ùå PR must reference an issue number.\n\n' +
                  'Please include one of the following in your PR title or description:\n' +
                  '‚Ä¢ "Fixes #123" - Automatically closes the issue when PR is merged\n' +
                  '‚Ä¢ "Closes #123" - Automatically closes the issue when PR is merged\n' +
                  '‚Ä¢ "Resolves #123" - Automatically closes the issue when PR is merged\n' +
                  '‚Ä¢ "#123" - References the issue without auto-closing\n\n' +
                  'This ensures proper issue tracking and project management.'
                );
              }
            }

  validate-pr-format:
    runs-on: ubuntu-latest
    name: Validate PR Format
    steps:
      - name: Check PR Title Format
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title;
            
            // Êé®Â•®„Åï„Çå„ÇãPR„Çø„Ç§„Éà„É´ÂΩ¢Âºè„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            const validPrefixes = [
              'feat:', 'fix:', 'docs:', 'style:', 'refactor:', 
              'test:', 'chore:', 'ci:', 'build:', 'perf:'
            ];
            
            const hasValidPrefix = validPrefixes.some(prefix => 
              title.toLowerCase().startsWith(prefix)
            );
            
            if (!hasValidPrefix) {
              core.warning(
                '‚ö†Ô∏è Consider using conventional commit format for PR title.\n\n' +
                'Recommended formats:\n' +
                '‚Ä¢ feat: add new feature\n' +
                '‚Ä¢ fix: resolve bug\n' +
                '‚Ä¢ docs: update documentation\n' +
                '‚Ä¢ refactor: improve code structure\n' +
                '‚Ä¢ test: add or update tests\n' +
                '‚Ä¢ chore: maintenance tasks\n\n' +
                'Current title: ' + title
              );
            } else {
              console.log('‚úÖ PR title follows conventional commit format');
            }